{"componentChunkName":"component---templates-documentation-jsx","path":"/docs/api/traversal","result":{"data":{"docBySlug2":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Grid traversal functions"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Grid traversal allows finding cells in the vicinity of an origin cell, and determining how to traverse the grid from one cell to another."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"kRing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"void kRing(H3Index origin, int k, H3Index* out);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"k-rings produces indices within k distance of the origin index."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"k-ring 0 is defined as the origin index, k-ring 1 is defined as k-ring 0 and\nall neighboring indices, and so on."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Output is placed in the provided array in no particular order. Elements of\nthe output array may be left zero, as can happen when crossing a pentagon."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"maxKringSize"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int maxKringSize(int k);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maximum number of indices that result from the kRing algorithm with the given k."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"kRingDistances"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"void kRingDistances(H3Index origin, int k, H3Index* out, int* distances);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"k-rings produces indices within k distance of the origin index."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"k-ring 0 is defined as the origin index, k-ring 1 is defined as k-ring 0 and\nall neighboring indices, and so on."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Output is placed in the provided array in no particular order. Elements of\nthe output array may be left zero, as can happen when crossing a pentagon."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"hexRange"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int hexRange(H3Index origin, int k, H3Index* out);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"hexRange produces indexes within k distance of the origin index.\nOutput behavior is undefined when one of the indexes returned by this\nfunction is a pentagon or is in the pentagon distortion area."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"k-ring 0 is defined as the origin index, k-ring 1 is defined as k-ring 0 and\nall neighboring indexes, and so on."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Output is placed in the provided array in order of increasing distance from\nthe origin."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Returns 0 if no pentagonal distortion is encountered."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"hexRangeDistances"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int hexRangeDistances(H3Index origin, int k, H3Index* out, int* distances);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"hexRange produces indexes within k distance of the origin index.\nOutput behavior is undefined when one of the indexes returned by this\nfunction is a pentagon or is in the pentagon distortion area."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"k-ring 0 is defined as the origin index, k-ring 1 is defined as k-ring 0 and\nall neighboring indexes, and so on."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Output is placed in the provided array in order of increasing distance from\nthe origin. The distances in hexagons is placed in the distances array at\nthe same offset."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Returns 0 if no pentagonal distortion is encountered."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"hexRanges"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int hexRanges(H3Index* h3Set, int length, int k, H3Index* out);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"hexRanges takes an array of input hex IDs and a max k-ring and returns an\narray of hexagon IDs sorted first by the original hex IDs and then by the\nk-ring (0 to max), with no guaranteed sorting within each k-ring group."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Returns 0 if no pentagonal distortion was encountered. Otherwise, output\nis undefined"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"hexRing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int hexRing(H3Index origin, int k, H3Index* out);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Produces the hollow hexagonal ring centered at origin with sides of length k."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Returns 0 if no pentagonal distortion was encountered."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"h3Line"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int h3Line(H3Index start, H3Index end, H3Index* out);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given two H3 indexes, return the line of indexes between them (inclusive)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This function may fail to find the line between two indexes, for\nexample if they are very far apart. It may also fail when finding\ndistances for indexes on opposite sides of a pentagon."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Notes:"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The specific output of this function should not be considered stable\nacross library versions. The only guarantees the library provides are\nthat the line length will be "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"h3Distance(start, end) + 1"}]},{"type":"text","value":" and that\nevery index in the line will be a neighbor of the preceding index."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Lines are drawn in grid space, and may not correspond exactly to either\nCartesian lines or great arcs."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"h3LineSize"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int h3LineSize(H3Index start, H3Index end);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Number of indexes in a line from the start index to the end index,\nto be used for allocating memory. Returns a negative number if the\nline cannot be computed."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"h3Distance"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int h3Distance(H3Index origin, H3Index h3);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Returns the distance in grid cells between the two indexes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Returns a negative number if finding the distance failed. Finding the distance can fail because the two\nindexes are not comparable (different resolutions), too far apart, or are separated by pentagonal\ndistortion. This is the same set of limitations as the local IJ coordinate space functions."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"experimentalH3ToLocalIj"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int experimentalH3ToLocalIj(H3Index origin, H3Index h3, CoordIJ *out);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Produces local IJ coordinates for an "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"H3"}]},{"type":"text","value":" index anchored by an origin."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This function is experimental, and its output is not guaranteed\nto be compatible across different versions of "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"H3"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"experimentalLocalIjToH3"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int experimentalLocalIjToH3(H3Index origin, const CoordIJ *ij, H3Index *out);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Produces an "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"H3"}]},{"type":"text","value":" index from local IJ coordinates anchored by an origin."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This function is experimental, and its output is not guaranteed\nto be compatible across different versions of "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"H3"}]},{"type":"text","value":"."}]}],"data":{"quirksMode":false}},"timeToRead":4,"excerpt":"Grid traversal functions Grid traversal allows finding cells in the vicinity of an origin cell, and determining how to traverse the grid…","frontmatter":{"title":"Grid traversal functions"}}},"pageContext":{"relativeLinks":{"docs/usecases":"/docs/usecases","../../usecases":"/docs/usecases","docs/README":"/docs","../../../docs":"/docs","docs":"/docs","docs/community/applications":"/docs/community/applications","../../community/applications":"/docs/community/applications","docs/community/libraries":"/docs/community/libraries","../../community/libraries":"/docs/community/libraries","docs/community/bindings":"/docs/community/bindings","../../community/bindings":"/docs/community/bindings","docs/core-library/coordsystems":"/docs/core-library/coordsystems","../../core-library/coordsystems":"/docs/core-library/coordsystems","docs/core-library/filters":"/docs/core-library/filters","../../core-library/filters":"/docs/core-library/filters","docs/core-library/geoToH3desc":"/docs/core-library/geoToH3desc","../../core-library/geoToH3desc":"/docs/core-library/geoToH3desc","docs/core-library/h3ToGeoBoundaryDesc":"/docs/core-library/h3ToGeoBoundaryDesc","../../core-library/h3ToGeoBoundaryDesc":"/docs/core-library/h3ToGeoBoundaryDesc","docs/community/tutorials":"/docs/community/tutorials","../../community/tutorials":"/docs/community/tutorials","docs/core-library/h3ToGeoDesc":"/docs/core-library/h3ToGeoDesc","../../core-library/h3ToGeoDesc":"/docs/core-library/h3ToGeoDesc","docs/core-library/h3indexing":"/docs/core-library/h3indexing","../../core-library/h3indexing":"/docs/core-library/h3indexing","docs/core-library/overview":"/docs/core-library/overview","../../core-library/overview":"/docs/core-library/overview","docs/core-library/restable":"/docs/core-library/restable","../../core-library/restable":"/docs/core-library/restable","docs/core-library/usage":"/docs/core-library/usage","../../core-library/usage":"/docs/core-library/usage","docs/api/indexing":"/docs/api/indexing","../indexing":"/docs/api/indexing","docs/api/hierarchy":"/docs/api/hierarchy","../hierarchy":"/docs/api/hierarchy","docs/api/inspection":"/docs/api/inspection","../inspection":"/docs/api/inspection","docs/api/misc":"/docs/api/misc","../misc":"/docs/api/misc","docs/api/regions":"/docs/api/regions","../regions":"/docs/api/regions","docs/api/uniedge":"/docs/api/uniedge","../uniedge":"/docs/api/uniedge","docs/api/traversal":"/docs/api/traversal","../traversal":"/docs/api/traversal"},"slug":"docs/api/traversal","toc":"docs"}}}